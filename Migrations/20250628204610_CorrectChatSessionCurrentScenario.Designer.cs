// <auto-generated />
using System;
using JFjewelery.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace JFjewelery.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250628204610_CorrectChatSessionCurrentScenario")]
    partial class CorrectChatSessionCurrentScenario
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("JFjewelery.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Rings"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Earrings"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Necklaces"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Bracelets"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Pendants"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Brooches"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Chains"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ear cuffs"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hair accessories"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Chokers"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Pins"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Gender")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Characteristics");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Gender = "Women",
                            Manufacturer = "JFjewelery",
                            ProductId = 1,
                            Style = "Classic"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.AppliesToEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AppliesToEntities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Metal"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Stone"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.CharacteristicMetal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int>("MetalId")
                        .HasColumnType("integer");

                    b.Property<int?>("Purity")
                        .HasColumnType("integer");

                    b.Property<int?>("ShapeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.Property<float?>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("ColorId");

                    b.HasIndex("MetalId");

                    b.HasIndex("ShapeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("TypeId");

                    b.ToTable("CharacteristicMetals");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacteristicId = 1,
                            ColorId = 1,
                            MetalId = 1,
                            Purity = 585,
                            ShapeId = 3,
                            SizeId = 2,
                            TypeId = 1,
                            Weight = 10f
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.CharacteristicStone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacteristicId")
                        .HasColumnType("integer");

                    b.Property<int?>("ColorId")
                        .HasColumnType("integer");

                    b.Property<int?>("Count")
                        .HasColumnType("integer");

                    b.Property<int?>("ShapeId")
                        .HasColumnType("integer");

                    b.Property<int?>("SizeId")
                        .HasColumnType("integer");

                    b.Property<int>("StoneId")
                        .HasColumnType("integer");

                    b.Property<int?>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacteristicId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ShapeId");

                    b.HasIndex("SizeId");

                    b.HasIndex("StoneId");

                    b.HasIndex("TypeId");

                    b.ToTable("CharacteristicStones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CharacteristicId = 1,
                            ColorId = 7,
                            Count = 4,
                            ShapeId = 11,
                            SizeId = 5,
                            StoneId = 2
                        },
                        new
                        {
                            Id = 2,
                            CharacteristicId = 1,
                            ColorId = 14,
                            Count = 62,
                            ShapeId = 12,
                            SizeId = 5,
                            StoneId = 7,
                            TypeId = 9
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Coating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppliesToEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppliesToEntityId");

                    b.ToTable("Coating");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliesToEntityId = 1,
                            Name = "Rhodium Plating"
                        },
                        new
                        {
                            Id = 2,
                            AppliesToEntityId = 1,
                            Name = "Gold Plating"
                        },
                        new
                        {
                            Id = 3,
                            AppliesToEntityId = 1,
                            Name = "Black Rhodium"
                        },
                        new
                        {
                            Id = 4,
                            AppliesToEntityId = 1,
                            Name = "Silver Plating"
                        },
                        new
                        {
                            Id = 5,
                            AppliesToEntityId = 1,
                            Name = "PVD Coating"
                        },
                        new
                        {
                            Id = 6,
                            AppliesToEntityId = 2,
                            Name = "Irradiation"
                        },
                        new
                        {
                            Id = 7,
                            AppliesToEntityId = 2,
                            Name = "Heat Treatment"
                        },
                        new
                        {
                            Id = 8,
                            AppliesToEntityId = 2,
                            Name = "Dyeing"
                        },
                        new
                        {
                            Id = 9,
                            AppliesToEntityId = 2,
                            Name = "Coating with Film"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppliesToEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppliesToEntityId");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliesToEntityId = 1,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 2,
                            AppliesToEntityId = 1,
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 3,
                            AppliesToEntityId = 1,
                            Name = "Rose Gold"
                        },
                        new
                        {
                            Id = 4,
                            AppliesToEntityId = 1,
                            Name = "White Gold"
                        },
                        new
                        {
                            Id = 5,
                            AppliesToEntityId = 1,
                            Name = "Platinum"
                        },
                        new
                        {
                            Id = 6,
                            AppliesToEntityId = 1,
                            Name = "Black"
                        },
                        new
                        {
                            Id = 7,
                            AppliesToEntityId = 2,
                            Name = "Red"
                        },
                        new
                        {
                            Id = 8,
                            AppliesToEntityId = 2,
                            Name = "Blue"
                        },
                        new
                        {
                            Id = 9,
                            AppliesToEntityId = 2,
                            Name = "Green"
                        },
                        new
                        {
                            Id = 10,
                            AppliesToEntityId = 2,
                            Name = "Yellow"
                        },
                        new
                        {
                            Id = 11,
                            AppliesToEntityId = 2,
                            Name = "Pink"
                        },
                        new
                        {
                            Id = 12,
                            AppliesToEntityId = 2,
                            Name = "Purple"
                        },
                        new
                        {
                            Id = 13,
                            AppliesToEntityId = 2,
                            Name = "Orange"
                        },
                        new
                        {
                            Id = 14,
                            AppliesToEntityId = 2,
                            Name = "White"
                        },
                        new
                        {
                            Id = 15,
                            AppliesToEntityId = 2,
                            Name = "Black"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.JType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppliesToEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppliesToEntityId");

                    b.ToTable("Type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliesToEntityId = 1,
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 2,
                            AppliesToEntityId = 1,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 3,
                            AppliesToEntityId = 1,
                            Name = "Platinum"
                        },
                        new
                        {
                            Id = 4,
                            AppliesToEntityId = 1,
                            Name = "Palladium"
                        },
                        new
                        {
                            Id = 5,
                            AppliesToEntityId = 1,
                            Name = "Titanium"
                        },
                        new
                        {
                            Id = 6,
                            AppliesToEntityId = 2,
                            Name = "Star-shaped"
                        },
                        new
                        {
                            Id = 7,
                            AppliesToEntityId = 2,
                            Name = "Milky"
                        },
                        new
                        {
                            Id = 8,
                            AppliesToEntityId = 2,
                            Name = "Impure"
                        },
                        new
                        {
                            Id = 9,
                            AppliesToEntityId = 2,
                            Name = "Pure"
                        },
                        new
                        {
                            Id = 10,
                            AppliesToEntityId = 2,
                            Name = "Translucent"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Metal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Metal");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Gold"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Silver"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Platinum"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Titanium"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Shape", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppliesToEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppliesToEntityId");

                    b.ToTable("Shape");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliesToEntityId = 1,
                            Name = "Round"
                        },
                        new
                        {
                            Id = 2,
                            AppliesToEntityId = 1,
                            Name = "Square"
                        },
                        new
                        {
                            Id = 3,
                            AppliesToEntityId = 1,
                            Name = "Oval"
                        },
                        new
                        {
                            Id = 4,
                            AppliesToEntityId = 1,
                            Name = "Rectangle"
                        },
                        new
                        {
                            Id = 5,
                            AppliesToEntityId = 1,
                            Name = "Triangle"
                        },
                        new
                        {
                            Id = 6,
                            AppliesToEntityId = 2,
                            Name = "Brilliant Cut"
                        },
                        new
                        {
                            Id = 7,
                            AppliesToEntityId = 2,
                            Name = "Princess Cut"
                        },
                        new
                        {
                            Id = 8,
                            AppliesToEntityId = 2,
                            Name = "Cushion Cut"
                        },
                        new
                        {
                            Id = 9,
                            AppliesToEntityId = 2,
                            Name = "Emerald Cut"
                        },
                        new
                        {
                            Id = 10,
                            AppliesToEntityId = 2,
                            Name = "Marquise Cut"
                        },
                        new
                        {
                            Id = 11,
                            AppliesToEntityId = 2,
                            Name = "Oval"
                        },
                        new
                        {
                            Id = 12,
                            AppliesToEntityId = 2,
                            Name = "Round"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppliesToEntityId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppliesToEntityId");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppliesToEntityId = 1,
                            Name = "Small"
                        },
                        new
                        {
                            Id = 2,
                            AppliesToEntityId = 1,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            AppliesToEntityId = 1,
                            Name = "Large"
                        },
                        new
                        {
                            Id = 4,
                            AppliesToEntityId = 2,
                            Name = "Tiny"
                        },
                        new
                        {
                            Id = 5,
                            AppliesToEntityId = 2,
                            Name = "Regular"
                        },
                        new
                        {
                            Id = 6,
                            AppliesToEntityId = 2,
                            Name = "Big"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Stone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stone");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Diamond"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sapphire"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Emerald"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Amethyst"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Topaz"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Spinel"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.ChatSession", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("CurrentScenario")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilterJson")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ScenarioStep")
                        .HasColumnType("text");

                    b.Property<string>("TempData")
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("ChatSessions");
                });

            modelBuilder.Entity("JFjewelery.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TelegramAcc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("JFjewelery.Models.CustomerPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("CustomerPaymentMethods");
                });

            modelBuilder.Entity("JFjewelery.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("JFjewelery.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("JFjewelery.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Card"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Paypal"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Blik"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            Name = "Ruby rose",
                            Price = 5000,
                            Quantity = 10
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "prod_1_front_1.jpg",
                            ProductId = 1
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Scenario.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("FilterJson")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StepId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StepId");

                    b.ToTable("Options");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Timeless, brilliant, and strong.",
                            FilterJson = "{\"Stones\":[\"Diamond\"],\"StoneColors\":[\"White\"],\"StoneTypes\":[\"Precious\"],\"StoneShapes\":[\"Round\",\"Princess\"],\"StoneSizes\":[\"Medium\",\"Large\"],\"CountMin\":1}",
                            Name = "Diamond",
                            StepId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Mysterious, spiritual, and creative.",
                            FilterJson = "{\"Stones\":[\"Amethyst\"],\"StoneColors\":[\"Purple\"],\"StoneTypes\":[\"Semi-Precious\"],\"StoneShapes\":[\"Oval\",\"Marquise\"],\"StoneSizes\":[\"Medium\"],\"CountMin\":1}",
                            Name = "Amethyst",
                            StepId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Natural, elegant, and deeply intuitive.",
                            FilterJson = "{\"Stones\":[\"Emerald\"],\"StoneColors\":[\"Green\"],\"StoneTypes\":[\"Precious\"],\"StoneShapes\":[\"Emerald\",\"Cushion\"],\"StoneSizes\":[\"Medium\",\"Large\"],\"CountMin\":1}",
                            Name = "Emerald",
                            StepId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Passionate, bold, and full of energy.",
                            FilterJson = "{\"Stones\":[\"Ruby\"],\"StoneColors\":[\"Red\"],\"StoneTypes\":[\"Precious\"],\"StoneShapes\":[\"Heart\",\"Oval\"],\"StoneSizes\":[\"Small\",\"Medium\"],\"CountMin\":1}",
                            Name = "Ruby",
                            StepId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Calm, wise, and emotionally deep.",
                            FilterJson = "{\"Stones\":[\"Sapphire\"],\"StoneColors\":[\"Blue\"],\"StoneTypes\":[\"Precious\"],\"StoneShapes\":[\"Round\",\"Cushion\"],\"StoneSizes\":[\"Medium\"],\"CountMin\":1}",
                            Name = "Sapphire",
                            StepId = 1
                        },
                        new
                        {
                            Id = 6,
                            Content = "Grounded, edgy, and protective.",
                            FilterJson = "{\"Stones\":[\"Obsidian\"],\"StoneColors\":[\"Black\"],\"StoneTypes\":[\"Organic\"],\"StoneShapes\":[\"Oval\",\"Cabochon\"],\"StoneSizes\":[\"Large\"],\"CountMin\":1}",
                            Name = "Obsidian",
                            StepId = 1
                        },
                        new
                        {
                            Id = 7,
                            Content = "Fresh, blooming, and full of life.",
                            FilterJson = "{\"Styles\":[\"Floral\",\"Nature\"],\"MetalColors\":[\"Rose Gold\"],\"StoneColors\":[\"Pink\",\"Green\"],\"Stones\":[\"Peridot\",\"Rose Quartz\"],\"StoneTypes\":[\"Semi-Precious\"]}",
                            Name = "Spring",
                            StepId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Bright, vibrant, and radiant.",
                            FilterJson = "{\"Styles\":[\"Bold\",\"Tropical\"],\"MetalColors\":[\"Yellow Gold\"],\"Stones\":[\"Topaz\",\"Citrine\"],\"StoneColors\":[\"Yellow\",\"Light Blue\"],\"MetalTypes\":[\"Polished\"]}",
                            Name = "Summer",
                            StepId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Warm, rich, and earthy.",
                            FilterJson = "{\"Styles\":[\"Vintage\",\"Boho\"],\"MetalColors\":[\"Copper\",\"Bronze\"],\"Stones\":[\"Garnet\",\"Tiger's Eye\"],\"StoneColors\":[\"Brown\",\"Red\",\"Orange\"],\"MetalTypes\":[\"Matte\"]}",
                            Name = "Autumn",
                            StepId = 2
                        },
                        new
                        {
                            Id = 10,
                            Content = "Cool, calm, and sparkling.",
                            FilterJson = "{\"Styles\":[\"Minimalist\",\"Classic\"],\"MetalColors\":[\"White Gold\",\"Silver\"],\"Stones\":[\"Diamond\",\"Sapphire\"],\"StoneColors\":[\"White\",\"Blue\"],\"StoneTypes\":[\"Precious\"],\"Purity\":925}",
                            Name = "Winter",
                            StepId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "Seeker of truth and wisdom.",
                            FilterJson = "{\"Styles\":[\"Classic\",\"Minimalist\"],\"MetalTypes\":[\"Brushed\"],\"Stones\":[\"Sapphire\"],\"StoneColors\":[\"Blue\"],\"StoneTypes\":[\"Precious\"],\"Purity\":925}",
                            Name = "The Sage",
                            StepId = 3
                        },
                        new
                        {
                            Id = 12,
                            Content = "Driven, focused, protective.",
                            FilterJson = "{\"Styles\":[\"Bold\",\"Military\"],\"MetalTypes\":[\"Matte\"],\"Metals\":[\"Steel\",\"Titanium\"],\"WeightMin\":10,\"StoneTypes\":[\"None\"]}",
                            Name = "🛡The Warrior",
                            StepId = 3
                        },
                        new
                        {
                            Id = 13,
                            Content = "Adventurous and independent.",
                            FilterJson = "{\"Styles\":[\"Boho\",\"Rustic\"],\"Metals\":[\"Silver\"],\"StoneShapes\":[\"Raw\"],\"StoneColors\":[\"Green\",\"Brown\"],\"Stones\":[\"Tourmaline\",\"Agate\"]}",
                            Name = "The Explorer",
                            StepId = 3
                        },
                        new
                        {
                            Id = 14,
                            Content = "A natural leader and organizer.",
                            FilterJson = "{\"Styles\":[\"Luxury\",\"Formal\"],\"Metals\":[\"Gold\"],\"MetalColors\":[\"Yellow Gold\"],\"Stones\":[\"Diamond\",\"Ruby\"],\"StoneTypes\":[\"Precious\"],\"Purity\":750}",
                            Name = "The Ruler",
                            StepId = 3
                        },
                        new
                        {
                            Id = 15,
                            Content = "Imaginative, artistic, visionary.",
                            FilterJson = "{\"Styles\":[\"Artistic\",\"Abstract\"],\"MetalColors\":[\"Mixed\"],\"Stones\":[\"Opal\",\"Amethyst\"],\"StoneColors\":[\"Violet\",\"Iridescent\"],\"StoneTypes\":[\"Semi-Precious\"]}",
                            Name = "The Creator",
                            StepId = 3
                        },
                        new
                        {
                            Id = 16,
                            Content = "Insightful, transformative, intuitive.",
                            FilterJson = "{\"Styles\":[\"Mystic\",\"Elegant\"],\"Stones\":[\"Moonstone\",\"Labradorite\"],\"StoneColors\":[\"Grey\",\"Blue\"],\"MetalTypes\":[\"Oxidized\"],\"Description\":\"Spiritual focus\"}",
                            Name = "The Magician",
                            StepId = 3
                        },
                        new
                        {
                            Id = 17,
                            Content = "Soulful, intimate, full of depth.",
                            FilterJson = "{\"Styles\":[\"Romantic\",\"Elegant\"],\"Metals\":[\"Rose Gold\"],\"StoneColors\":[\"Deep Blue\",\"Purple\"],\"StoneTypes\":[\"Semi-Precious\"]}",
                            Name = "Smooth Jazz",
                            StepId = 4
                        },
                        new
                        {
                            Id = 18,
                            Content = "Modern, vibrant, full of energy.",
                            FilterJson = "{\"Styles\":[\"Modern\",\"Edgy\"],\"MetalColors\":[\"Black\",\"Chrome\"],\"Metals\":[\"Titanium\"],\"Stones\":[\"Cubic Zirconia\"],\"StoneColors\":[\"Neon\"]}",
                            Name = "🎛Electronic Beats",
                            StepId = 4
                        },
                        new
                        {
                            Id = 19,
                            Content = "Elegant, timeless, structured.",
                            FilterJson = "{\"Styles\":[\"Classic\"],\"Metals\":[\"Gold\"],\"StoneTypes\":[\"Precious\"],\"Stones\":[\"Diamond\",\"Pearl\"],\"MetalTypes\":[\"Polished\"]}",
                            Name = "Classical Symphony",
                            StepId = 4
                        },
                        new
                        {
                            Id = 20,
                            Content = "Gentle, personal, a bit nostalgic.",
                            FilterJson = "{\"Styles\":[\"Vintage\",\"Rustic\"],\"Stones\":[\"Amber\",\"Moonstone\"],\"MetalColors\":[\"Copper\",\"Bronze\"],\"StoneColors\":[\"Soft White\",\"Honey\"]}",
                            Name = "Indie Acoustic",
                            StepId = 4
                        },
                        new
                        {
                            Id = 21,
                            Content = "Minimalist, calming, introspective.",
                            FilterJson = "{\"Styles\":[\"Minimalist\"],\"Metals\":[\"Silver\"],\"StoneTypes\":[],\"MetalTypes\":[\"Matte\"],\"WeightMax\":5}",
                            Name = "Ambient Silence",
                            StepId = 4
                        },
                        new
                        {
                            Id = 22,
                            Content = "Eclectic, rich with cultural textures.",
                            FilterJson = "{\"Styles\":[\"Ethnic\",\"Boho\"],\"Stones\":[\"Turquoise\",\"Garnet\"],\"StoneColors\":[\"Red\",\"Green\",\"Blue\"],\"Metals\":[\"Mixed\"]}",
                            Name = "World Fusion",
                            StepId = 4
                        },
                        new
                        {
                            Id = 23,
                            Content = "Soft, romantic, blooming with charm",
                            FilterJson = "{\"Styles\": [\"Romantic\"], \"StoneTypes\": [\"Semi-Precious\"], \"StoneColors\": [\"Pink\", \"Lavender\"]}",
                            Name = "Floral",
                            StepId = 5
                        },
                        new
                        {
                            Id = 24,
                            Content = "Earthy, grounded, with quiet strength",
                            FilterJson = "{\"MetalColors\": [\"Brown\", \"Copper\"], \"StoneShapes\": [\"Oval\", \"Cushion\"], \"StoneTypes\": [\"Natural\"]}",
                            Name = "Woody",
                            StepId = 5
                        },
                        new
                        {
                            Id = 25,
                            Content = "Deep, spicy, mysterious",
                            FilterJson = "{\"StoneColors\": [\"Red\", \"Amber\"], \"MetalTypes\": [\"Engraved\"], \"Styles\": [\"Exotic\"]}",
                            Name = "Oriental",
                            StepId = 5
                        },
                        new
                        {
                            Id = 26,
                            Content = "Fresh, clean, with a sense of freedom",
                            FilterJson = "{\"StoneColors\": [\"Blue\", \"Aqua\"], \"Styles\": [\"Marine\"], \"MetalColors\": [\"Silver\"]}",
                            Name = "Oceanic",
                            StepId = 5
                        },
                        new
                        {
                            Id = 27,
                            Content = "Gentle, nostalgic, subtly elegant",
                            FilterJson = "{\"Styles\": [\"Vintage\"], \"StoneColors\": [\"Peach\", \"White\"], \"MetalShapes\": [\"Soft\"]}",
                            Name = "Powdery",
                            StepId = 5
                        },
                        new
                        {
                            Id = 28,
                            Content = "Pure, simple, speaks without a trace",
                            FilterJson = "{\"Styles\": [\"Minimalist\"], \"StoneTypes\": [], \"MetalTypes\": [\"Plain\"], \"StoneColors\": [\"Clear\"]}",
                            Name = "Unscented (Minimalist)",
                            StepId = 5
                        },
                        new
                        {
                            Id = 29,
                            Content = "Subtle, intriguing, layered",
                            FilterJson = "{\"StoneTypes\": [\"Obsidian\", \"Amethyst\"], \"StoneColors\": [\"Black\", \"Purple\"], \"Styles\": [\"Mystic\"]}",
                            Name = "Mystery",
                            StepId = 6
                        },
                        new
                        {
                            Id = 30,
                            Content = "Bold, fiery, full of emotion",
                            FilterJson = "{\"StoneColors\": [\"Red\"], \"Stones\": [\"Ruby\"], \"Styles\": [\"Dramatic\"], \"MetalColors\": [\"Gold\"]}",
                            Name = "Passion",
                            StepId = 6
                        },
                        new
                        {
                            Id = 31,
                            Content = "Airy, carefree, joyful",
                            FilterJson = "{\"StoneColors\": [\"Pink\", \"Sky Blue\"], \"MetalTypes\": [\"Thin\"], \"Styles\": [\"Playful\"]}",
                            Name = "Lightness",
                            StepId = 6
                        },
                        new
                        {
                            Id = 32,
                            Content = "Refined, distant, composed",
                            FilterJson = "{\"StoneColors\": [\"White\", \"Blue\"], \"Styles\": [\"Elegant\"], \"MetalColors\": [\"Platinum\", \"Silver\"]}",
                            Name = "Cool Elegance",
                            StepId = 6
                        },
                        new
                        {
                            Id = 33,
                            Content = "Fun, whimsical, unexpected",
                            FilterJson = "{\"StoneShapes\": [\"Heart\", \"Star\"], \"Styles\": [\"Fun\"], \"StoneColors\": [\"Multicolor\"]}",
                            Name = "Playfulness",
                            StepId = 6
                        },
                        new
                        {
                            Id = 34,
                            Content = "Strong, assertive, unmistakable",
                            FilterJson = "{\"MetalTypes\": [\"Bold\"], \"Stones\": [\"Diamond\"], \"Styles\": [\"Statement\"], \"StoneColors\": [\"Clear\"]}",
                            Name = "Confidence",
                            StepId = 6
                        },
                        new
                        {
                            Id = 35,
                            Content = "Helping you see your true path",
                            FilterJson = "{\"StoneTypes\": [\"Quartz\"], \"StoneColors\": [\"Clear\"], \"Styles\": [\"Minimalist\"], \"Description\": \"Clarity and insight\"}",
                            Name = "Inner Clarity",
                            StepId = 7
                        },
                        new
                        {
                            Id = 36,
                            Content = "Giving you strength to speak and act boldly",
                            FilterJson = "{\"Stones\": [\"Ruby\"], \"StoneColors\": [\"Red\"], \"Styles\": [\"Bold\"], \"Description\": \"Confidence and assertiveness\"}",
                            Name = "Courage",
                            StepId = 7
                        },
                        new
                        {
                            Id = 37,
                            Content = "Guarding your energy and intentions",
                            FilterJson = "{\"Stones\": [\"Obsidian\"], \"StoneColors\": [\"Black\"], \"StoneTypes\": [\"Protective\"], \"Styles\": [\"Mystic\"]}",
                            Name = "Protection",
                            StepId = 7
                        },
                        new
                        {
                            Id = 38,
                            Content = "Attracting deep bonds and warmth",
                            FilterJson = "{\"StoneColors\": [\"Pink\"], \"Stones\": [\"Rose Quartz\"], \"Styles\": [\"Romantic\"], \"Description\": \"Emotional connection\"}",
                            Name = "Love & Connection",
                            StepId = 7
                        },
                        new
                        {
                            Id = 39,
                            Content = "Sparking ideas and artistic flow",
                            FilterJson = "{\"StoneColors\": [\"Purple\"], \"Stones\": [\"Amethyst\"], \"Styles\": [\"Artistic\"], \"Description\": \"Imagination and inspiration\"}",
                            Name = "Creativity",
                            StepId = 7
                        },
                        new
                        {
                            Id = 40,
                            Content = "Guiding you through change with grace",
                            FilterJson = "{\"StoneColors\": [\"Blue\", \"Green\"], \"Stones\": [\"Labradorite\"], \"Styles\": [\"Mystic\"], \"Description\": \"Change and growth\"}",
                            Name = "Transformation",
                            StepId = 7
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Scenario.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Scenarios");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Personal form"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Custom characteristics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Custom for an event "
                        },
                        new
                        {
                            Id = 4,
                            Name = "Custom by picture"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Virtual fitting"
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Scenario.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("NextStepId")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("NextStepId");

                    b.HasIndex("ScenarioId");

                    b.ToTable("Steps");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Stone",
                            NextStepId = 2,
                            QuestionText = "If you were a stone, what kind would you be?",
                            ScenarioId = 1
                        },
                        new
                        {
                            Id = 2,
                            Name = "Season",
                            NextStepId = 3,
                            QuestionText = "What is your favorite season?",
                            ScenarioId = 1
                        },
                        new
                        {
                            Id = 3,
                            Name = "Archetype",
                            NextStepId = 4,
                            QuestionText = "Which archetype best represents you?",
                            ScenarioId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Music",
                            NextStepId = 5,
                            QuestionText = "If your ideal piece of jewelry were music, what would it sound like?",
                            ScenarioId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Scent",
                            NextStepId = 6,
                            QuestionText = "If your ideal piece of jewelry had a scent, what would it be?",
                            ScenarioId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Energy",
                            NextStepId = 7,
                            QuestionText = "What kind of energy would you like your jewelry to amplify",
                            ScenarioId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Power",
                            QuestionText = "If your jewelry had a hidden power, what would it help you with?",
                            ScenarioId = 1
                        });
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristic", b =>
                {
                    b.HasOne("JFjewelery.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.CharacteristicMetal", b =>
                {
                    b.HasOne("JFjewelery.Models.Characteristic", "Characteristic")
                        .WithMany("Metals")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JFjewelery.Models.Characteristics.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("JFjewelery.Models.Characteristics.Metal", "Metal")
                        .WithMany()
                        .HasForeignKey("MetalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JFjewelery.Models.Characteristics.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId");

                    b.HasOne("JFjewelery.Models.Characteristics.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("JFjewelery.Models.Characteristics.JType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Characteristic");

                    b.Navigation("Color");

                    b.Navigation("Metal");

                    b.Navigation("Shape");

                    b.Navigation("Size");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.CharacteristicStone", b =>
                {
                    b.HasOne("JFjewelery.Models.Characteristic", "Characteristic")
                        .WithMany("Stones")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JFjewelery.Models.Characteristics.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId");

                    b.HasOne("JFjewelery.Models.Characteristics.Shape", "Shape")
                        .WithMany()
                        .HasForeignKey("ShapeId");

                    b.HasOne("JFjewelery.Models.Characteristics.Size", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId");

                    b.HasOne("JFjewelery.Models.Characteristics.Stone", "Stone")
                        .WithMany()
                        .HasForeignKey("StoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JFjewelery.Models.Characteristics.JType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");

                    b.Navigation("Characteristic");

                    b.Navigation("Color");

                    b.Navigation("Shape");

                    b.Navigation("Size");

                    b.Navigation("Stone");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Coating", b =>
                {
                    b.HasOne("JFjewelery.Models.Characteristics.AppliesToEntity", "AppliesTo")
                        .WithMany()
                        .HasForeignKey("AppliesToEntityId");

                    b.Navigation("AppliesTo");
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Color", b =>
                {
                    b.HasOne("JFjewelery.Models.Characteristics.AppliesToEntity", "AppliesTo")
                        .WithMany()
                        .HasForeignKey("AppliesToEntityId");

                    b.Navigation("AppliesTo");
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.JType", b =>
                {
                    b.HasOne("JFjewelery.Models.Characteristics.AppliesToEntity", "AppliesTo")
                        .WithMany()
                        .HasForeignKey("AppliesToEntityId");

                    b.Navigation("AppliesTo");
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Shape", b =>
                {
                    b.HasOne("JFjewelery.Models.Characteristics.AppliesToEntity", "AppliesTo")
                        .WithMany()
                        .HasForeignKey("AppliesToEntityId");

                    b.Navigation("AppliesTo");
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristics.Size", b =>
                {
                    b.HasOne("JFjewelery.Models.Characteristics.AppliesToEntity", "AppliesTo")
                        .WithMany()
                        .HasForeignKey("AppliesToEntityId");

                    b.Navigation("AppliesTo");
                });

            modelBuilder.Entity("JFjewelery.Models.ChatSession", b =>
                {
                    b.HasOne("JFjewelery.Models.Customer", "Customer")
                        .WithOne("ChatSession")
                        .HasForeignKey("JFjewelery.Models.ChatSession", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("JFjewelery.Models.CustomerPaymentMethod", b =>
                {
                    b.HasOne("JFjewelery.Models.Customer", "Customer")
                        .WithMany("CustomerPaymentMethods")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JFjewelery.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("CustomerPaymentMethods")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("JFjewelery.Models.Order", b =>
                {
                    b.HasOne("JFjewelery.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JFjewelery.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("JFjewelery.Models.OrderProduct", b =>
                {
                    b.HasOne("JFjewelery.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("JFjewelery.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JFjewelery.Models.Product", b =>
                {
                    b.HasOne("JFjewelery.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("JFjewelery.Models.ProductImage", b =>
                {
                    b.HasOne("JFjewelery.Models.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("JFjewelery.Models.Scenario.Option", b =>
                {
                    b.HasOne("JFjewelery.Models.Scenario.Step", "Step")
                        .WithMany("Options")
                        .HasForeignKey("StepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("JFjewelery.Models.Scenario.Step", b =>
                {
                    b.HasOne("JFjewelery.Models.Scenario.Step", "NextStep")
                        .WithMany()
                        .HasForeignKey("NextStepId");

                    b.HasOne("JFjewelery.Models.Scenario.Scenario", "Scenario")
                        .WithMany("Steps")
                        .HasForeignKey("ScenarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NextStep");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("JFjewelery.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("JFjewelery.Models.Characteristic", b =>
                {
                    b.Navigation("Metals");

                    b.Navigation("Stones");
                });

            modelBuilder.Entity("JFjewelery.Models.Customer", b =>
                {
                    b.Navigation("ChatSession");

                    b.Navigation("CustomerPaymentMethods");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JFjewelery.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("JFjewelery.Models.PaymentMethod", b =>
                {
                    b.Navigation("CustomerPaymentMethods");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("JFjewelery.Models.Product", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("JFjewelery.Models.Scenario.Scenario", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("JFjewelery.Models.Scenario.Step", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
